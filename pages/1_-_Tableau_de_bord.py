# ============================================================================
# IMPORTS ET CONFIGURATION
# ============================================================================

import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import warnings

# Import des modules m√©tier personnalis√©s
from logic.param import (
    annees, 
    electricity_carbone_factor, 
    facteurs_carbone, 
    scenarios_temporelles
)
from logic.func import (
    calculate_energy_profile_by_sector,
    calculate_heating_efficiencies,
    create_consumption_chart,
    create_cumulative_emissions_chart,
    create_dynamic_histogram,
    create_emissions_chart,
    filter_data_by_selection,
    load_sample_data,
    prepare_strategies,
    simulate,
    synthesize_results
)

# Suppression des avertissements Streamlit non critiques
warnings.filterwarnings("ignore", message=".*missing ScriptRunContext.*")

# Configuration de la page Streamlit
st.set_page_config(
    page_title="SmartE - Simulation R√©novation √ânerg√©tique",
    page_icon="images/logo.png",
    layout="wide"
)

# ============================================================================
# FONCTIONS UTILITAIRES
# ============================================================================

def setup_page_header():
    """Configure l'en-t√™te de la page avec logo et titre"""
    col_logo, col_title = st.columns([1, 5])
    
    with col_logo:
        st.image("images/logo.png", width=140)
    
    with col_title:
        st.title("SmartE - √âtude de la transition √©nerg√©tique du parc immobilier de la CUD")

def display_introduction():
    """Affiche la banni√®re d'introduction et les instructions d'utilisation"""
    # Banni√®re d'introduction
    st.markdown("""
    <h3> Optimisez votre strat√©gie de r√©novation √©nerg√©tique</h3>
    <p>Cet outil permet de simuler diff√©rents sc√©narios de r√©novation du parc immobilier et d'analyser leur impact sur :</p>
    <ul>
        <li>Les <b>consommations √©nerg√©tiques</b> (MWh)</li>
        <li>Les <b>√©missions de CO‚ÇÇ</b> (tonnes √©quivalent carbone)</li>
        <li>La <b>transition √©nerg√©tique</b> du territoire</li>
    </ul>
    <p>P√©riode d'analyse : <b>2024 √† 2050</b> (objectif neutralit√© carbone)</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Section "Comment √ßa marche" - repliable
    with st.expander("‚ÑπÔ∏è Comment utiliser ce simulateur", expanded=False):
        st.markdown("""
        1. **S√©lectionnez** le p√©rim√®tre d'√©tude (r√©sidentiel seul ou avec tertiaire)
        2. **Param√©trez** votre simulation dans la barre lat√©rale ‚Üê
        3. **Visualisez** les r√©sultats en quelques secondes
        4. **Comparez** diff√©rents sc√©narios
        
        ### Concepts cl√©s :
        - **P√©rim√®tre d'√©tude** : Type de b√¢timents inclus dans l'analyse
        - **Strat√©gies de r√©novation** : Ordre de priorit√© des b√¢timents √† r√©nover  
        - **Sc√©narios temporels** : Rythme de d√©ploiement des r√©novations  
        - **Conversion √©nerg√©tique** : Substitution entre sources d'√©nergie  
        - **Facteurs carbone** : Intensit√© CO‚ÇÇ de chaque √©nergie (kgCO‚ÇÇ/kWh)
        """)

def initialize_data():
    """Charge et initialise les donn√©es de la ville si pas d√©j√† en m√©moire"""
    with st.spinner("Chargement des donn√©es..."):
        st.session_state.city_data = load_sample_data()
    
    # Sauvegarde des sc√©narios pour utilisation dans d'autres pages
    st.session_state['scenarios_temporelles'] = scenarios_temporelles

    
    return st.session_state.city_data

def setup_study_perimeter_selection():
    """Configure la s√©lection du p√©rim√®tre d'√©tude dans la sidebar"""
    st.sidebar.markdown("### üè† P√©rim√®tre d'√©tude")
    
    # S√©lection du type d'usage (r√©sidentiel/tertiaire)
    with st.sidebar.expander("üìã Type de b√¢timents", expanded=False):
        st.markdown("""
        **Choisissez quels types de b√¢timents inclure dans l'analyse :**
        - üè† **R√©sidentiel** : Logements
        - üè¢ **Tertiaire** : B√¢timents d'activit√© (bureaux, commerces, etc.)
        - üè†+üè¢ **R√©sidentiel + Tertiaire** 
        """)
        
        usage_selection = st.radio(
            "Secteurs √† analyser",
            options=["R√©sidentiel", "Tertiaire", "R√©sidentiel + Tertiaire"],
            index=2,  # Par d√©faut : R√©sidentiel + Tertiaire
            help="D√©finit le p√©rim√®tre des b√¢timents inclus dans l'analyse"
        )
    
    # S√©lection g√©ographique CUD (Communaut√© Urbaine de Dunkerque)
    with st.sidebar.expander("üèõÔ∏è P√©rim√®tre g√©ographique", expanded=False):
        st.markdown("""
        **Filtrez sur les b√¢timents de la Communaut√© Urbaine de Dunkerque :**
        - ‚úÖ **B√¢timents CUD uniquement** : Focus sur le patrimoine CUD
        - üåç **Tous les b√¢timents** : Analyse compl√®te du territoire
        """)
        
        cud_only = st.checkbox(
            "Limiter aux b√¢timents CUD",
            value=False,
            help="Si coch√©, seuls les b√¢timents identifi√©s comme appartenant √† la CUD seront analys√©s"
        )
    
    return usage_selection, cud_only

def display_filtered_data_stats(city_data, usage_selection, cud_only):
    """Affiche les statistiques des donn√©es filtr√©es dans la sidebar"""
    # Calcul des statistiques
    residential_count = len(city_data[city_data["UseType"] == "LOGEMENT"])
    tertiary_count = len(city_data[city_data["UseType"] != "LOGEMENT"])
    total_buildings = len(city_data)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìä Donn√©es filtr√©es")
    
    # Affichage des m√©triques
    st.sidebar.metric("Total b√¢timents", total_buildings)
    
    # D√©tail par secteur selon la s√©lection
    if usage_selection == "R√©sidentiel + Tertiaire":
        col1, col2 = st.sidebar.columns(2)
        with col1:
            st.metric("üè† R√©sidentiel", residential_count)
        with col2:
            st.metric("üè¢ Tertiaire", tertiary_count)
    elif usage_selection == "R√©sidentiel":
        st.sidebar.metric("üè† R√©sidentiel", residential_count)
    else:
        st.sidebar.metric("üè¢ Tertiaire", tertiary_count)
    
    # Information sur le filtre CUD
    if cud_only:
        if 'is_cud' in city_data.columns:
            cud_buildings = len(city_data[city_data['is_cud'] == True])
            st.sidebar.info(f"üèõÔ∏è Analyse limit√©e aux {cud_buildings} b√¢timents CUD")
        else:
            st.sidebar.warning("‚ö†Ô∏è Filtre CUD non disponible - Tous les b√¢timents inclus")
    
    # Calcul et affichage de la consommation totale
    original_profile = calculate_energy_profile_by_sector(city_data)
    total_consumption = sum([p['consommation_basic'] for p in original_profile.values()])
    st.sidebar.metric("Consommation totale", f"{total_consumption:.0f} MWh/an")

def setup_simulation_parameters():
    """Configure les param√®tres de simulation dans la sidebar"""
    st.sidebar.markdown("---")
    st.sidebar.header("üîß Param√®tres de simulation")
    
    # === TAUX DE R√âNOVATION ===
    with st.sidebar.expander("üèóÔ∏è Taux de r√©novation", expanded=False):
        st.markdown("""
        **D√©finit la proportion totale du parc immobilier qui sera r√©nov√©e d'ici 2050.**
        - 0% = Aucune r√©novation
        - 100% = Tous les b√¢timents r√©nov√©s
        """)
        coverage_rate = st.slider(
            "Taux de r√©novation total (2024-2050)",
            min_value=0,
            max_value=100,
            value=30,
            step=5,
            help="Pourcentage total du parc immobilier √† r√©nover sur la p√©riode 2024-2050"
        )
    
    return coverage_rate

def setup_renovation_strategy_selection(strategies):
    """Configure la s√©lection de strat√©gie de r√©novation"""
    with st.sidebar.expander("üìå Strat√©gie de r√©novation", expanded=False):
        st.markdown("""
        **D√©termine l'ordre dans lequel les b√¢timents seront r√©nov√©s:**
        - üîù Par consommation/m¬≤: Priorit√© aux b√¢timents les plus √©nergivores
        - üè¢ Par consommation totale: Priorit√© aux grands consommateurs
        - üé≤ Al√©atoire: S√©lection non ordonn√©e
        """)
        selected_strategy = st.selectbox(
            "Strat√©gie appliqu√©e",
            list(strategies.keys()),
            index=0,
            help="Ordre de priorit√© pour la r√©novation des b√¢timents"
        )
    
    return selected_strategy

def setup_temporal_scenario_selection():
    """Configure la s√©lection du sc√©nario temporel"""
    with st.sidebar.expander("‚è±Ô∏è Sc√©nario temporel", expanded=False):
        st.markdown("""
        **D√©finit la vitesse de d√©ploiement des r√©novations:**
        - üèÅ Lin√©aire: Progression constante
        - üöÄ Rapide d√©but: Effort important d√®s le d√©but
        - üê¢ Lent d√©but: D√©marrage progressif
        """)
        selected_scenario = st.selectbox(
            "Profil de d√©ploiement",
            list(scenarios_temporelles.keys()),
            index=0,
            help="Rythme de d√©ploiement des r√©novations sur la p√©riode"
        )
    
    return selected_scenario

def setup_energy_substitution(original_profile, heating_efficiency_map):
    """Configure le syst√®me de substitution des √©nergies dans la sidebar"""
    with st.sidebar.expander("üîÑ Conversion des √©nergies de chauffage", expanded=False):
        st.markdown("""
        **Remplacez progressivement une source d'√©nergie par une autre**  
        *Ex: Conversion du fioul vers des pompes √† chaleur √©lectriques*
        """)

        # Style CSS pour am√©liorer l'affichage
        st.markdown("""
        <style>
        .energy-substitution {
            padding: 15px;
            background-color: #f0f2f6;
            border-radius: 10px;
            margin-bottom: 15px;
        }
        </style>
        """, unsafe_allow_html=True)

        # Interface de s√©lection de la substitution
        with st.container():
            source = st.selectbox(
                "Source √† remplacer",
                options=list(original_profile.keys()),
                index=1,  # Gaz par d√©faut
                key="sub_source",
                help="√ânergie actuellement utilis√©e que vous souhaitez r√©duire"
            )
            target = st.selectbox(
                "√ânergie de remplacement",
                options=[e for e in heating_efficiency_map.keys() if e != source],
                index=0,  # √âlectricit√© par d√©faut
                key="sub_target",
                help="Nouvelle √©nergie qui remplacera la source"
            )
            rate = st.slider(
                "% de conversion",
                min_value=0,
                max_value=100,
                value=30,
                step=5,
                key="sub_rate",
                help="Pourcentage de conversion maximum d'ici 2050"
            )

        # Gestion des substitutions en session
        if 'substitutions' not in st.session_state:
            st.session_state['substitutions'] = []

        # Bouton d'ajout de substitution
        if st.button("‚ûï Ajouter cette conversion", use_container_width=True):
            if rate > 0:
                st.session_state['substitutions'].append((source, target, rate))
                st.success(f"Conversion ajout√©e : {rate}% de {source} ‚Üí {target}")
            else:
                st.warning("Veuillez sp√©cifier un pourcentage de conversion")

        # Affichage et gestion des conversions actives
        if st.session_state['substitutions']:
            st.markdown("**Conversions actives :**")
            for i, (src, tgt, pct) in enumerate(st.session_state['substitutions']):
                cols = st.columns([4, 1])
                with cols[0]:
                    st.markdown(f"`{src}` ‚Üí `{tgt}` ({pct}%)")
                with cols[1]:
                    if st.button("‚úï", key=f"del_{i}"):
                        st.session_state['substitutions'].pop(i)
                        st.rerun()
    
    return st.session_state['substitutions']

def display_results(conso_par_vecteur, 
                   emissions_par_vecteur, df_selected, annees, scenario_data):
    """Affiche les r√©sultats de la simulation"""
    st.subheader(f"R√©sultats pour la strat√©gie: {st.session_state['strategy_name']} - Sc√©nario: {st.session_state['scenario_name']}")
    
    # === GRAPHIQUES PRINCIPAUX ===
    st.subheader("Consommation et √©missions annuelles")
    col1, col2 = st.columns(2)
    
    with col1:
        fig_conso = create_consumption_chart(annees, conso_par_vecteur)
        st.plotly_chart(fig_conso, use_container_width=True)
    
    with col2:
        fig_emissions = create_emissions_chart(annees, emissions_par_vecteur)
        st.plotly_chart(fig_emissions, use_container_width=True)
    
    # === NOUVEAU GRAPHIQUE DES √âMISSIONS CUMUL√âES ===
    st.subheader("Impact cumul√© des r√©novations sur les √©missions")
    fig_cumulative = create_cumulative_emissions_chart(annees, emissions_par_vecteur, st.session_state['scenario_name'])
    st.plotly_chart(fig_cumulative, use_container_width=True)
    
    # Explication de l'interpr√©tation
    st.info("""
    **Comment interpr√©ter ce graphique :**
    - La pente de la courbe repr√©sente le rythme des √©missions
    - Plus la courbe s'aplatit t√¥t, plus les r√©ductions d'√©missions sont pr√©coces
    - Comparer diff√©rents sc√©narios pour voir l'impact du rythme de r√©novation
    """)
    
    # === DISTRIBUTION DES CONSOMMATIONS ===
    st.subheader("Distribution des consommations de chauffage du parc")
    fig_distribution = create_dynamic_histogram(df_selected, scenario_data)
    st.plotly_chart(fig_distribution, use_container_width=True)

def display_summary_metrics(conso_par_vecteur, emissions_par_vecteur):
    """Affiche le bilan √©nerg√©tique et carbone sous forme de m√©triques"""
    st.subheader("Bilan √©nerg√©tique et carbone (2024-2050)")
    bilan_stats = synthesize_results(conso_par_vecteur, emissions_par_vecteur)
    
    col1, col2, col3 = st.columns(3)
    
    # === CONSOMMATION ===
    with col1:
        st.metric(
            "Consommation 2024",
            f"{bilan_stats['Consommation 2024 (MWh)']:,.0f} MWh"
        )
        st.metric(
            "Consommation 2050",
            f"{bilan_stats['Consommation 2050 (MWh)']:,.0f} MWh",
            delta=f"-{bilan_stats['R√©duction conso (MWh)']:,.0f} MWh ({bilan_stats['R√©duction conso (%)']:.1f}%)"
        )
    
    # === √âMISSIONS ===
    with col2:
        st.metric(
            "√âmissions 2024",
            f"{bilan_stats['√âmissions 2024 (tCO‚ÇÇ)']:,.0f} tCO‚ÇÇ"
        )
        st.metric(
            "√âmissions 2050",
            f"{bilan_stats['√âmissions 2050 (tCO‚ÇÇ)']:,.0f} tCO‚ÇÇ",
            delta=f"-{bilan_stats['√âmissions 2024 (tCO‚ÇÇ)'] - bilan_stats['√âmissions 2050 (tCO‚ÇÇ)']:,.0f} tCO‚ÇÇ ({bilan_stats['R√©duction √©missions (%)']:.1f}%)"
        )
    
    # === TOTAUX ===
    with col3:
        total_conso = sum([sum(conso) for conso in conso_par_vecteur.values()])
        total_emissions = sum([sum(emissions) for emissions in emissions_par_vecteur.values()])
        st.metric("Consommation totale (2024-2050)", f"{total_conso:,.0f} MWh")
        st.metric("√âmissions totales (2024-2050)", f"{total_emissions:,.0f} tCO‚ÇÇ")

def display_detailed_tables(conso_par_vecteur, emissions_par_vecteur, annees):
    """Affiche les tableaux d√©taill√©s par √©nergie"""
    st.subheader("D√©tails par type d'√©nergie")
    
    tab1, tab2 = st.tabs(["Consommations", "√âmissions"])
    
    # Tableau des consommations
    with tab1:
        conso_df = pd.DataFrame(conso_par_vecteur, index=annees.astype(str))
        conso_df.index.name = "Ann√©e"
        st.dataframe(conso_df.style.format("{:,.1f}"), use_container_width=True)
    
    # Tableau des √©missions
    with tab2:
        emissions_df = pd.DataFrame(emissions_par_vecteur, index=annees.astype(str))
        emissions_df.index.name = "Ann√©e"
        st.dataframe(emissions_df.style.format("{:,.1f}"), use_container_width=True)

def display_assumptions(heating_efficiency_map, electricity_carbone_factor, 
                       facteurs_carbone, annees):
    """Affiche la section des hypoth√®ses et param√®tres utilis√©s"""
    st.header("üîé Hypoth√®ses")
    
    # === √âVOLUTION DES FACTEURS CARBONE ===
    st.subheader("√âvolution des facteurs carbone (kgCO‚ÇÇ/kWh)")
    
    carbone_df = pd.DataFrame({
        "√âlectricit√©": electricity_carbone_factor
    }, index=annees)
    carbone_df.index.name = "Ann√©e"
    
    fig_carbone = px.line(
        carbone_df,
        title="√âvolution du facteur carbone pour l'√©lectricit√©<br><sup>Rapport HySPI Hydrog√®ne industriel - Sc√©narios prospectifs des impacts environnementaux</sup>",
        labels={"value": "kgCO‚ÇÇ/kWh", "variable": "√ânergie"}
    )
    fig_carbone.update_layout(height=500)
    st.plotly_chart(fig_carbone, use_container_width=True)

    # === TABLEAU DES RENDEMENTS ===
    st.subheader("Tableau r√©sum√© des hypoth√®ses de rendement et d'√©missions carbone de chauffage")
    df_eff = pd.DataFrame({
        "√ânergie": list(heating_efficiency_map.keys()),
        "Rendement (%)": [f"{eff:.2f}" for eff in heating_efficiency_map.values()],
        "√âmissions (kgCO‚ÇÇ/kWh)": [
            facteurs_carbone.get(energie, [0])[0] 
            for energie in heating_efficiency_map.keys()
        ]
    })
    st.table(df_eff)

def save_session_data(scenario_name, strategy_name, usage_selection, 
                     substitutions, coverage_rate):
    """Sauvegarde les donn√©es de session pour utilisation dans d'autres pages"""
    st.session_state['scenario_name'] = scenario_name
    st.session_state['strategy_name'] = strategy_name
    st.session_state['usage_selection'] = usage_selection
    st.session_state['substitutions'] = substitutions
    st.session_state['coverage_rate'] = coverage_rate

# ============================================================================
# FONCTION PRINCIPALE
# ============================================================================

def main():
    """Fonction principale de l'application"""
    
    # === CONFIGURATION DE LA PAGE ===
    setup_page_header()
    display_introduction()
    st.markdown("---")  # S√©parateur visuel
    
    # === INITIALISATION DES DONN√âES ===
    original_city_data = initialize_data()
    
    # === CONFIGURATION DU P√âRIM√àTRE D'√âTUDE ===
    usage_selection, cud_only = setup_study_perimeter_selection()
    
    # Application des filtres sur les donn√©es
    st.session_state.city_data = filter_data_by_selection(
        original_city_data, usage_selection, cud_only
    )
    
    # V√©rification que des donn√©es existent apr√®s filtrage
    if len(st.session_state.city_data) == 0:
        st.error("‚ùå Aucun b√¢timent ne correspond aux crit√®res s√©lectionn√©s. Veuillez modifier vos filtres.")
        st.stop()
    
    # Affichage des statistiques des donn√©es filtr√©es
    display_filtered_data_stats(st.session_state.city_data, usage_selection, cud_only)
    
    # === CALCULS PR√âPARATOIRES ===
    heating_efficiency_map = calculate_heating_efficiencies(st.session_state.city_data)
    strategies = prepare_strategies(st.session_state.city_data)
    vecteurs_energie = st.session_state.city_data["energie_imope"].unique()
    original_profile = calculate_energy_profile_by_sector(st.session_state.city_data)
    
    # === PARAM√âTRAGE DE LA SIMULATION ===
    coverage_rate  = setup_simulation_parameters()
    selected_strategy = setup_renovation_strategy_selection(strategies)
    selected_scenario = setup_temporal_scenario_selection()
    substitutions = setup_energy_substitution(original_profile, heating_efficiency_map)

    # === INITIALISATION DE L'√âTAT DE SESSION ===
    if "simulation_already_run" not in st.session_state:
        st.session_state.simulation_already_run = False

    # === BOUTON DE LANCEMENT ===
    run_simulation = False

    # Simulation automatique au premier chargement
    if not st.session_state.simulation_already_run:
        run_simulation = True
        st.session_state.simulation_already_run = True

    # Simulation manuelle via bouton
    st.sidebar.markdown("---")
    if st.sidebar.button("üöÄ Lancer ou relancer la simulation"):
        run_simulation = True
        st.session_state.simulation_already_run = True  # Important pour afficher ensuite les r√©sultats

    if run_simulation:
        strategie = strategies[selected_strategy]
        scenario_temporelles = scenarios_temporelles[selected_scenario]

        conso_par_vecteur, emissions_par_vecteur = simulate(
            strategie,
            coverage_rate,
            scenario_temporelles,
            vecteurs_energie,
            heating_efficiency_map,
            substitutions.copy()
        )
        save_session_data(
            selected_scenario, selected_strategy, usage_selection, 
            substitutions, coverage_rate
        )
        
        # Stocker r√©sultats dans session pour r√©utilisation
        st.session_state.conso_par_vecteur = conso_par_vecteur
        st.session_state.emissions_par_vecteur = emissions_par_vecteur
        st.session_state.strategie = strategie
        st.session_state.scenario_temporelles = scenario_temporelles

    # Si simulation pas lanc√©e maintenant, v√©rifier si r√©sultats en session
    if not run_simulation:
        if (
            "conso_par_vecteur" in st.session_state 
            and "emissions_par_vecteur" in st.session_state
            and "strategie" in st.session_state
            and "scenario_temporelles" in st.session_state
        ):
            conso_par_vecteur = st.session_state.conso_par_vecteur
            emissions_par_vecteur = st.session_state.emissions_par_vecteur
            strategie = st.session_state.strategie
            scenario_temporelles = st.session_state.scenario_temporelles
        else:
            st.info("Cliquez sur le bouton üöÄ dans la sidebar pour lancer la simulation.")
            st.stop()

    # Maintenant que les variables sont d√©finies, on peut afficher
    display_results(
        conso_par_vecteur, 
        emissions_par_vecteur, strategie, annees, scenario_temporelles
    )
    st.markdown("---") 
    display_summary_metrics(conso_par_vecteur, emissions_par_vecteur)
    st.markdown("---") 
    display_detailed_tables(conso_par_vecteur, emissions_par_vecteur, annees)
    st.markdown("---")  # S√©parateur visuel
    # Affichage des hypoth√®ses et param√®tres
    display_assumptions(
        heating_efficiency_map, 
        electricity_carbone_factor, 
        facteurs_carbone, 
        annees
    )


# ============================================================================
# POINT D'ENTR√âE DE L'APPLICATION
# ============================================================================

if __name__ == "__main__":
    main()